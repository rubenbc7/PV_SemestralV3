using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.GameFoundation;
using UnityEngine.GameFoundation.Components;
using UnityEngine.GameFoundation.DefaultCatalog;
using UnityEngine.UI;

namespace UnityEditor.GameFoundation.Components
{
    /// <summary>
    ///     Custom inspector for a <see cref="PromotionPopupView"/> component.
    /// </summary>
    [CustomEditor(typeof(PromotionPopupView))]
    class PromotionPopupViewEditor : Editor
    {
        PromotionPopupView m_PromotionPopupView;

        string[] m_TransactionNames;
        string[] m_TransactionKeys;

        int m_SelectedTransactionIndex = -1;
        int m_SelectedPromotionImageIndex = -1;
        int m_SelectedDescriptionTextIndex = -1;
        int m_SelectedBadgeTextIndex = -1;
        int m_SelectedPriceIconPropertyIndex = -1;
        int m_SelectedPayoutItemImagePropertyIndex = -1;

        DropdownCatalogItemHelper<BaseTransactionAsset> m_TransactionDropdownHelper = new DropdownCatalogItemHelper<BaseTransactionAsset>();
        DropdownStaticPropertyHelper m_PromotionImageAssetDropdownHelper = new DropdownStaticPropertyHelper();
        DropdownStaticPropertyHelper m_PromoDescriptionPropertyDropdownHelper = new DropdownStaticPropertyHelper();
        DropdownStaticPropertyHelper m_PromoBadgeTextPropertyDropdownHelper = new DropdownStaticPropertyHelper();
        DropdownCostItemPropertyHelper m_PriceIconPropertyDropdownHelper = new DropdownCostItemPropertyHelper();
        DropdownMultipleCatalogItemsHelper m_PayoutImagePropertyDropdownHelper = new DropdownMultipleCatalogItemsHelper();

        SerializedProperty m_TransactionKey_SerializedProperty;
        SerializedProperty m_AutoGeneratePromoImage_SerializedProperty;
        SerializedProperty m_ItemPayoutCountPrefix_SerializedProperty;
        SerializedProperty m_CurrencyPayoutCountPrefix_SerializedProperty;
        SerializedProperty m_PayoutItemIconSpritePropertyKey_SerializedProperty;
        SerializedProperty m_PromoImageAssetPropertyKey_SerializedProperty;
        SerializedProperty m_DescriptionPropertyKey_SerializedProperty;
        SerializedProperty m_BadgePropertyKey_SerializedProperty;
        SerializedProperty m_PriceIconSpritePropertyKey_SerializedProperty;
        SerializedProperty m_TransactionNameTextField_SerializedProperty;
        SerializedProperty m_PromoDescriptionTextField_SerializedProperty;
        SerializedProperty m_AutoGeneratedImageContainer_SerializedProperty;
        SerializedProperty m_PromoImageField_SerializedProperty;
        SerializedProperty m_BadgeField_SerializedProperty;
        SerializedProperty m_PurchaseButton_SerializedProperty;
        SerializedProperty m_ShowTextsEditorFields_SerializedProperty;
        SerializedProperty m_ShowButtonEditorFields_SerializedProperty;

        readonly string[] kExcludedFields =
        {
            "m_Script",
            nameof(PromotionPopupView.m_TransactionKey),
            nameof(PromotionPopupView.m_AutoGeneratePromoImage),
            nameof(PromotionPopupView.m_ItemPayoutCountPrefix),
            nameof(PromotionPopupView.m_CurrencyPayoutCountPrefix),
            nameof(PromotionPopupView.m_PayoutItemIconSpritePropertyKey),
            nameof(PromotionPopupView.m_PromoImageSpritePropertyKey),
            nameof(PromotionPopupView.m_descriptionPropertyKey),
            nameof(PromotionPopupView.m_BadgeTextPropertyKey),
            nameof(PromotionPopupView.m_PriceIconSpritePropertyKey),
            nameof(PromotionPopupView.m_TitleTextField),
            nameof(PromotionPopupView.m_DescriptionTextField),
            nameof(PromotionPopupView.m_AutoGeneratedImageContainer),
            nameof(PromotionPopupView.m_PromoImageField),
            nameof(PromotionPopupView.m_BadgeField),
            nameof(PromotionPopupView.m_PurchaseButton),
            nameof(PromotionPopupView.showTextEditorFields),
            nameof(PromotionPopupView.showButtonEditorFields),
        };

        void OnEnable()
        {
            m_PromotionPopupView = target as PromotionPopupView;

            m_TransactionKey_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_TransactionKey));
            m_AutoGeneratePromoImage_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_AutoGeneratePromoImage));
            m_ItemPayoutCountPrefix_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_ItemPayoutCountPrefix));
            m_CurrencyPayoutCountPrefix_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_CurrencyPayoutCountPrefix));
            m_PayoutItemIconSpritePropertyKey_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_PayoutItemIconSpritePropertyKey));
            m_PromoImageAssetPropertyKey_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_PromoImageSpritePropertyKey));
            m_DescriptionPropertyKey_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_descriptionPropertyKey));
            m_BadgePropertyKey_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_BadgeTextPropertyKey));
            m_PriceIconSpritePropertyKey_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_PriceIconSpritePropertyKey));
            m_TransactionNameTextField_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_TitleTextField));
            m_PromoDescriptionTextField_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_DescriptionTextField));
            m_AutoGeneratedImageContainer_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_AutoGeneratedImageContainer));
            m_PromoImageField_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_PromoImageField));
            m_BadgeField_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_BadgeField));
            m_PurchaseButton_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.m_PurchaseButton));
            m_ShowTextsEditorFields_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.showTextEditorFields));
            m_ShowButtonEditorFields_SerializedProperty = serializedObject.FindProperty(nameof(m_PromotionPopupView.showButtonEditorFields));

            PopulateTransactions();
            PopulatePropertyKeys();

            // To update the content when the GameObject is selected
            m_PromotionPopupView.UpdateContent();
        }

        void PopulateTransactions()
        {
            m_SelectedTransactionIndex = m_TransactionDropdownHelper.Populate(m_TransactionKey_SerializedProperty.stringValue);
        }

        void PopulatePropertyKeys()
        {
            var transactionItem = PrefabTools.GetLookUpCatalogAsset().FindItem(m_TransactionKey_SerializedProperty.stringValue)
                as BaseTransactionAsset;

            m_SelectedPromotionImageIndex = m_PromotionImageAssetDropdownHelper.Populate(transactionItem,
                m_PromoImageAssetPropertyKey_SerializedProperty.stringValue, PropertyType.ResourcesAsset);
            m_SelectedDescriptionTextIndex = m_PromoDescriptionPropertyDropdownHelper.Populate(transactionItem,
                m_DescriptionPropertyKey_SerializedProperty.stringValue, PropertyType.String);
            m_SelectedBadgeTextIndex = m_PromoBadgeTextPropertyDropdownHelper.Populate(transactionItem,
                m_BadgePropertyKey_SerializedProperty.stringValue, PropertyType.String);
            m_SelectedPriceIconPropertyIndex = m_PriceIconPropertyDropdownHelper.Populate(
                transactionItem, m_PriceIconSpritePropertyKey_SerializedProperty.stringValue,
                new []{ PropertyType.ResourcesAsset, PropertyType.Addressables });

            PopulatePayoutItemIconPropertyKeys(transactionItem);
        }

        void PopulatePayoutItemIconPropertyKeys(BaseTransactionAsset transactionAsset)
        {
            var catalogItemAssets = new List<CatalogItemAsset>();

            if (transactionAsset != null)
            {
                var exchangeObjects = new List<ExchangeDefinitionObject>();
                transactionAsset.payout.GetItems(exchangeObjects);

                foreach (var exchangeObject in exchangeObjects)
                {
                    catalogItemAssets.Add(exchangeObject.catalogItem);
                }
            }

            m_SelectedPayoutItemImagePropertyIndex = m_PayoutImagePropertyDropdownHelper.Populate(
                catalogItemAssets, m_PayoutItemIconSpritePropertyKey_SerializedProperty.stringValue,
                new []{ PropertyType.ResourcesAsset, PropertyType.Addressables });
        }

        public override void OnInspectorGUI()
        {
            // Pull the information from the target into the serializedObject.
            serializedObject.Update();

            DrawTransactionItemSection();
            EditorGUILayout.Space();

            DrawPromoImageSection();
            EditorGUILayout.Space();

            DrawTextSection();
            EditorGUILayout.Space();

            DrawPurchaseButtonSection();
            EditorGUILayout.Space();

            // Use the default object field GUI for these properties.
            DrawPropertiesExcluding(serializedObject, kExcludedFields);

            // Push all changes made on the serializedObject back to the target.
            serializedObject.ApplyModifiedProperties();
        }

        void DrawTransactionItemSection()
        {
            var itemDisplayContent = new GUIContent("Transaction Item", 
                "The Transaction Item to display in this button");

            PrefabTools.DisplayCatalogOverrideAlertIfNecessary();

            using (var check = new EditorGUI.ChangeCheckScope())
            {
                m_SelectedTransactionIndex = EditorGUILayout.Popup(itemDisplayContent,
                    m_SelectedTransactionIndex, m_TransactionDropdownHelper.displayNames);
                m_TransactionKey_SerializedProperty.stringValue = m_TransactionDropdownHelper
                    .GetKey(m_SelectedTransactionIndex);

                if (check.changed)
                {
                    PopulatePropertyKeys();
                }
            }
        }

        void DrawPromoImageSection()
        {
            var autoGeneratePromoImageContent = new GUIContent("Auto Generate Promo Image", 
                "When true, a promo image will automatically be generated in the Promo Image Container. " +
                "When false, a single image will be fetched from the Transaction Item's static properties using the " +
                "Promo Image Property Key.");
            var payoutItemIconPropertyContent = new GUIContent("Payout Item Icon Property Key",
                "The key that is defined in the Static Properties of each of the Transaction's Payout Items. " +
                "Used when auto generating promotion image.");
            var itemPayoutCountPrefixContent = new GUIContent("Item Count Prefix",
                "The string to add as a prefix to each item's payout count.");
            var currencyPayoutCountPrefixContent = new GUIContent("Currency Count Prefix",
                "The string to add as a prefix to each currency's payout count.");
            var autoGenImageContent = new GUIContent("Promo Image Container",
                "The Game Object in which to display the promotion image.");
            var promoImageContent = new GUIContent("Promo Image Property Key",
                "The key for the sprite that is defined in the Static Property of Transaction Item to " +
                "display the promotion image.  If none is specified no image will be displayed.");
            var promotionImageFieldContent = new GUIContent("Promo Image Field",
                "The Game Object in which to display the promotion image.");

            EditorGUILayout.PropertyField(m_AutoGeneratePromoImage_SerializedProperty, autoGeneratePromoImageContent);

            EditorGUI.indentLevel++;

            if (m_AutoGeneratePromoImage_SerializedProperty.boolValue)
            {
                m_SelectedPayoutItemImagePropertyIndex = EditorGUILayout.Popup(payoutItemIconPropertyContent, 
                    m_SelectedPayoutItemImagePropertyIndex, m_PayoutImagePropertyDropdownHelper.displayNames);
                m_PayoutItemIconSpritePropertyKey_SerializedProperty.stringValue = m_PayoutImagePropertyDropdownHelper
                    .GetKey(m_SelectedPayoutItemImagePropertyIndex);

                EditorGUILayout.PropertyField(m_ItemPayoutCountPrefix_SerializedProperty, itemPayoutCountPrefixContent);
                EditorGUILayout.PropertyField(m_CurrencyPayoutCountPrefix_SerializedProperty, currencyPayoutCountPrefixContent);

                EditorGUILayout.Space();

                EditorGUILayout.PropertyField(m_AutoGeneratedImageContainer_SerializedProperty, autoGenImageContent);
            }
            else
            {
                m_SelectedPromotionImageIndex = EditorGUILayout.Popup(promoImageContent, 
                    m_SelectedPromotionImageIndex, m_PromotionImageAssetDropdownHelper.displayNames);
                m_PromoImageAssetPropertyKey_SerializedProperty.stringValue = m_PromotionImageAssetDropdownHelper
                    .GetKey(m_SelectedPromotionImageIndex);

                EditorGUILayout.PropertyField(m_PromoImageField_SerializedProperty, promotionImageFieldContent);
            }

            EditorGUI.indentLevel--;
        }

        void DrawTextSection()
        {
            var titleTextFieldContent = new GUIContent("Title Text Field",
                "Text component in which to display the transaction display name.");
            var promoDescriptionContent = new GUIContent("Description Property Key",
                "The key for the description text that is defined in the Static Property of Transaction Item.");
            var descriptionTextFieldContent = new GUIContent("Description Text Field",
                "Text component in which to display the promotion's description.");
            var promoBadgeContent = new GUIContent("Badge Text Property Key",
                "The key for the badge text that is defined in the Static Property of Transaction Item.");
            var badgeFieldContent = new GUIContent("Badge",
                "GameObject in which to display the promotion's badge.");
            
            m_ShowTextsEditorFields_SerializedProperty.boolValue = EditorGUILayout.Foldout(
                m_ShowTextsEditorFields_SerializedProperty.boolValue, "Texts", true);

            if (m_ShowTextsEditorFields_SerializedProperty.boolValue)
            {
                EditorGUI.indentLevel++;

                EditorGUILayout.PropertyField(m_TransactionNameTextField_SerializedProperty, titleTextFieldContent);

                EditorGUILayout.Space();

                m_SelectedDescriptionTextIndex = EditorGUILayout.Popup(promoDescriptionContent, 
                    m_SelectedDescriptionTextIndex, m_PromoDescriptionPropertyDropdownHelper.displayNames);
                m_DescriptionPropertyKey_SerializedProperty.stringValue = m_PromoDescriptionPropertyDropdownHelper
                    .GetKey(m_SelectedDescriptionTextIndex);

                EditorGUILayout.PropertyField(m_PromoDescriptionTextField_SerializedProperty, descriptionTextFieldContent);

                EditorGUILayout.Space();

                m_SelectedBadgeTextIndex = EditorGUILayout.Popup(promoBadgeContent,
                    m_SelectedBadgeTextIndex, m_PromoBadgeTextPropertyDropdownHelper.displayNames);
                m_BadgePropertyKey_SerializedProperty.stringValue = m_PromoBadgeTextPropertyDropdownHelper
                    .GetKey(m_SelectedBadgeTextIndex);

                EditorGUILayout.ObjectField(m_BadgeField_SerializedProperty, badgeFieldContent);

                EditorGUI.indentLevel--;
            }
        }

        /// <summary>
        ///     Draws the purchase button of the <see cref="PromotionPopupViewEditor"/>
        /// </summary>
        void DrawPurchaseButtonSection()
        {
            var priceIconPropertyKeyContent = new GUIContent("Price Icon Asset Property Key",
                "The key for the sprite that is defined in the Static Property of Transaction Item. " +
                "If none is specified no image will be displayed.");
            var purchaseButtonContent = new GUIContent("Purchase Button",
                "PurchaseButton component to use when generating a button for purchasing item in this view.");

            m_ShowButtonEditorFields_SerializedProperty.boolValue = EditorGUILayout.Foldout(
                m_ShowButtonEditorFields_SerializedProperty.boolValue, "Purchase Button", true);

            if (m_ShowButtonEditorFields_SerializedProperty.boolValue)
            {
                EditorGUI.indentLevel++;

                m_SelectedPriceIconPropertyIndex = EditorGUILayout.Popup(priceIconPropertyKeyContent, 
                    m_SelectedPriceIconPropertyIndex, m_PriceIconPropertyDropdownHelper.displayNames);
                m_PriceIconSpritePropertyKey_SerializedProperty.stringValue = m_PriceIconPropertyDropdownHelper
                    .GetKey(m_SelectedPriceIconPropertyIndex);

                EditorGUILayout.PropertyField(m_PurchaseButton_SerializedProperty, purchaseButtonContent);

                EditorGUI.indentLevel--;
            }
        }
    }
}
